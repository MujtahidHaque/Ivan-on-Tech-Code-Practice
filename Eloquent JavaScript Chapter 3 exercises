// Exercise 1
// The previous chapter introduced the standard function Math.min that returns its smallest argument. 
// We can build something like that now. Write a function min that takes two arguments and returns their minimum.

function min(a,b) {
  if (a <= b) return a;
  else return b;
};

console.log(min(3,10));
3
console.log(min(3,-10));
-10
console.log(min(3,3));
3

// Exercise 2, part 1
// We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2
// to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:
// Zero is even
// One is odd
// For any other number N, its evenness is the same as N - 2
// 
// Define a recursive function isEven corresponding to this description. 
// The function should accept a single parameter (a positive, whole number) and return a Boolean.
// Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?

function isEven(x) {
  if (x == 0) return true;
  else if (x == 1) return false;
  else return isEven(x - 2);
};

console.log(isEven(50));
true
console.log(isEven(75));
false
console.log(isEven(-1));

// Exercise 2, part 2
// Using -1 creates a range error. The function only works for positive numbers.
// Therefore, to do this operation, the number needs to be first made positive.
// Here is the new code that allows the operation on negative numbers:

function isEven(x) {
  if (x == 0) return true;
  else if (x == 1) return false;
  else if (x < 0) return isEven(-x);
  else return isEven(x - 2);
};

console.log(isEven(-1));
false
console.log(isEven(-50));
true
console.log(isEven(-75));
false

// Exercise 3: Bean Counting
// You can get the Nth character, or letter, from a string by writing "string"[N]. 
// The returned value will be a string containing only one character (for example, "b"). 
// The first character has position 0, which causes the last one to be found at position string.length - 1. 
// In other words, a two-character string has length 2, and its characters have positions 0 and 1. 
// 
// Write a function countBs that takes a string as its only argument and returns a number 
// that indicates how many uppercase “B” characters there are in the string.


function countBs(TEXT) {
 let Bcount = 0;
 if (typeof TEXT === "string") {
    for(var position = 0; position <= TEXT.length; position++) {
      if (TEXT[position] === "B")
      Bcount++;
    };
    return Bcount;
  }
  else return "ERROR NOT A STRING";
};

console.log(countBs(123456));
ERROR NOT A STRING
console.log(countBs(thisisavariable));
Uncaught ReferenceError: thisisavariable is not defined at <anonymous>:1:21
console.log(countBs(false));
ERROR NOT A STRING
console.log(countBs("BBBbbBB"));
5
console.log(countBs("Baby"));
1
console.log(countBs("asdqwe"));
0
console.log(countBs("TrueB"));
1
console.log(countBs("Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo."));
3

// Next, write a function called countChar that behaves like countBs, 
// except it takes a second argument that indicates the character that is to be counted 
// (rather than counting only uppercase “B” characters). Rewrite countBs to make use of this new function.

function countChar(TEXT, CHAR) {
 let charCount = 0;
 if (typeof TEXT === "string") {
    for(var position = 0; position <= TEXT.length; position++) {
      if (TEXT[position] === CHAR)
      charCount++;
    };
    return charCount;
  }
  else return "ERROR NOT A STRING";
};
